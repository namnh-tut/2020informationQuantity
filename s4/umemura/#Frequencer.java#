package s4.umemura;
import java.lang.*;
import s4.specification.*;


/*package s4.specification;
  ’¤³’¤³’¤Ï’¡¢’£±’²ó’¡¢’£²’²ó’¤È’ÊÑ’¹¹’¤Î’¤Ê’¤¤’³°’Éô’»Å’ÍÍ’¤Ç’¤¢’¤ë’¡£
  public interface FrequencerInterface {     // This interface provides the design for frequency counter.
  void setTarget(byte  target[]); // set the data to search.
  void setSpace(byte  space[]);  // set the data to be searched target from.
  int frequency(); //It return -1, when TARGET is not set or TARGET's length is zero
  //Otherwise, it return 0, when SPACE is not set or SPACE's length is zero
  //Otherwise, get the frequency of TAGET in SPACE
  int subByteFrequency(int start, int end);
  // get the frequency of subByte of taget, i.e target[start], taget[start+1], ... , target[end-1].
  // For the incorrect value of START or END, the behavior is undefined.
  }
*/



public class Frequencer implements FrequencerInterface{
    // Code to start with: This code is not working, but good start point to work.
    byte [] myTarget;
    byte [] mySpace;
    boolean targetReady = false;
    boolean spaceReady = false;

    int []  suffixArray; // Suffix Array’¤Î’¼Â’Áõ’¤Ë’»È’¤¦’¥Ç’¡¼’¥¿’¤Î’·¿’¤òint []’¤È’¤»’¤è’¡£


    // The variable, "suffixArray" is the sorted array of all suffixes of mySpace.                                    
    // Each suffix is expressed by a integer, which is the starting position in mySpace. 
                            
    // The following is the code to print the contents of suffixArray.
    // This code could be used on debugging.                                                                

    private void printSuffixArray() {
        if(spaceReady) {
            for(int i=0; i< mySpace.length; i++) {
                int s = suffixArray[i];
                for(int j=s;j<mySpace.length;j++) {
                    System.out.write(mySpace[j]);
                }
                System.out.write('\n');
            }
        }
    }

    private int suffixCompare(int i, int j) {
        // suffixCompare’¤Ï’¥½’¡¼’¥È’¤Î’¤¿’¤á’¤Î’Èæ’³Ó’¥á’¥½’¥Ã’¥É’¤Ç’¤¢’¤ë’¡£
        // ’¼¡’¤Î’¤è’¤¦’¤Ë’Äê’µÁ’¤»’¤è’¡£
        // comparing two suffixes by dictionary order.
        // suffix_i is a string starting with the position i in "byte [] mySpace".
        // Each i and j denote suffix_i, and suffix_j.                            
        // Example of dictionary order                                            
        // "i"      <  "o"        : compare by code                              
        // "Hi"     <  "Ho"       ; if head is same, compare the next element    
        // "Ho"     <  "Ho "      ; if the prefix is identical, longer string is big  
        //  
        //The return value of "int suffixCompare" is as follows. 
        // if suffix_i > suffix_j, it returns 1   
        // if suffix_i < suffix_j, it returns -1  
        // if suffix_i = suffix_j, it returns 0;   

        // ’¤³’¤³’¤Ë’¥³’¡¼’¥É’¤ò’µ­’½Ò’¤»’¤è 
        //                                          
        return 0; // ’¤³’¤Î’¹Ô’¤Ï’ÊÑ’¹¹’¤·’¤Ê’¤±’¤ì’¤Ð’¤¤’¤±’¤Ê’¤¤’¡£ 
    }

    public void setSpace(byte []space) { 
        // suffixArray’¤Î’Á°’½è’Íý’¤Ï’¡¢setSpace’¤Ç’Äê’µÁ’¤»’¤è’¡£
        mySpace = space; if(mySpace.length>0) spaceReady = true;
        // First, create unsorted suffix array.
        suffixArray = new int[space.length];
        // put all suffixes in suffixArray.
        for(int i = 0; i< space.length; i++) {
            suffixArray[i] = i; // Please note that each suffix is expressed by one integer.      
        }
        //                                            
        // ’¤³’¤³’¤Ë’¡¢int suffixArray’¤ò’¥½’¡¼’¥È’¤¹’¤ë’¥³’¡¼’¥É’¤ò’½ñ’¤±’¡£
        // ’¡¡’½ç’ÈÖ’¤ÏsuffixCompare’¤Ç’Äê’µÁ’¤µ’¤ì’¤ë’¤â’¤Î’¤È’¤¹’¤ë’¡£    
    }

    // Suffix Array’¤ò’ÍÑ’¤¤’¤Æ’¡¢’Ê¸’»ú’Îó’¤Î’ÉÑ’ÅÙ’¤ò’µá’¤á’¤ë’¥³’¡¼’¥É
    // ’¤³’¤³’¤«’¤é’¡¢’»Ø’Äê’¤¹’¤ë’ÈÏ’°Ï’¤Î’¥³’¡¼’¥É’¤Ï’ÊÑ’¹¹’¤·’¤Æ’¤Ï’¤Ê’¤é’¤Ê’¤¤’¡£

    public void setTarget(byte [] target) {
        myTarget = target; if(myTarget.length>0) targetReady = true;
    }

    public int frequency() {
        if(targetReady == false) return -1;
        if(spaceReady == false) return 0;
        return subByteFrequency(0, myTarget.length);
    }



    public int subByteFrequency(int start, int end) {
        /* This method be work as follows, but much more efficient
           int spaceLength = mySpace.length;                      
           int count = 0;                                        
           for(int offset = 0; offset< spaceLength - (end - start); offset++) {
            boolean abort = false; 
            for(int i = 0; i< (end - start); i++) {
             if(myTarget[start+i] != mySpace[offset+i]) { abort = true; break; }
            }
            if(abort == false) { count++; }
           }
        */
        int first = subByteStartIndex(start, end);
        int last1 = subByteEndIndex(start, end);
        return last1 - first;
    }
    // ’ÊÑ’¹¹’¤·’¤Æ’¤Ï’¤¤’¤±’¤Ê’¤¤’¥³’¡¼’¥É’¤Ï’¤³’¤³’¤Þ’¤Ç’¡£

    private int targetCompare(int i, int j, int k) {
        // suffixArray’¤ò’Ãµ’º÷’¤¹’¤ë’¤È’¤­’¤Ë’»È’¤¦’Èæ’³Ó’´Ø’¿ô’¡£
        // ’¼¡’¤Î’¤è’¤¦’¤Ë’Äê’µÁ’¤»’¤è
        // suffix_i is a string in mySpace starting at i-th position.
        // target_i_k is a string in myTarget start at j-th postion ending k-th position.
        // comparing suffix_i and target_j_k.
        // if the beginning of suffix_i matches target_j_k, it return 0.
        // The behavior is different from suffixCompare on this case.
        // if suffix_i > target_j_k it return 1; 
        // if suffix_i < target_j_k it return -1;
        // It should be used to search the appropriate index of some suffix.
        // Example of search 
        // suffix          target
        // "o"       >     "i"
        // "o"       <     "z"
        // "o"       =     "o"
        // "o"       <     "oo"
        // "Ho"      >     "Hi"
        // "Ho"      <     "Hz"
        // "Ho"      =     "Ho"
        // "Ho"      <     "Ho "   : "Ho " is not in the head of suffix "Ho"
        // "Ho"      =     "H"     : "H" is in the head of suffix "Ho"
        //
        // ’¤³’¤³’¤Ë’Èæ’³Ó’¤Î’¥³’¡¼’¥É’¤ò’½ñ’¤± 
        //
        return 0; // ’¤³’¤Î’¹Ô’¤Ï’ÊÑ’¹¹’¤·’¤Ê’¤±’¤ì’¤Ð’¤Ê’¤é’¤Ê’¤¤’¡£
    }


    private int subByteStartIndex(int start, int end) {
        //suffix array’¤Î’¤Ê’¤«’¤Ç’¡¢’ÌÜ’Åª’¤Î’Ê¸’»ú’Îó’¤Î’½Ð’¸½’¤¬’»Ï’¤Þ’¤ë’°Ì’ÃÖ’¤ò’µá’¤á’¤ë’¥á’¥½’¥Ã’¥É
        // ’°Ê’²¼’¤Î’¤è’¤¦’¤Ë’Äê’µÁ’¤»’¤è’¡£
        /* Example of suffix created from "Hi Ho Hi Ho"
           0: Hi Ho
           1: Ho
           2: Ho Hi Ho
           3:Hi Ho
           4:Hi Ho Hi Ho
           5:Ho
           6:Ho Hi Ho
           7:i Ho
           8:i Ho Hi Ho
           9:o
           A:o Hi Ho
        */

        // It returns the index of the first suffix 
        // which is equal or greater than target_start_end.                         
	// Suppose target is set "Ho Ho Ho Ho".
        // if start = 0, and end = 2, target_start_end is "Ho".
        // if start = 0, and end = 3, target_start_end is "Ho ".
        // Assuming the suffix array is created from "Hi Ho Hi Ho",                 
        // if target_start_end is "Ho", it will return 5.                           
        // Assuming the suffix array is created from "Hi Ho Hi Ho",                 
        // if target_start_end is "Ho ", it will return 6.                
        //                                                                          
        // ’¤³’¤³’¤Ë’¥³’¡¼’¥É’¤ò’µ­’½Ò’¤»’¤è’¡£                                                 
        //                                                                         
        return suffixArray.length; //’¤³’¤Î’¥³’¡¼’¥É’¤Ï’ÊÑ’¹¹’¤·’¤Ê’¤±’¤ì’¤Ð’¤Ê’¤é’¤Ê’¤¤’¡£          
    }

    private int subByteEndIndex(int start, int end) {
        //suffix array’¤Î’¤Ê’¤«’¤Ç’¡¢’ÌÜ’Åª’¤Î’Ê¸’»ú’Îó’¤Î’½Ð’¸½’¤·’¤Ê’¤¯’¤Ê’¤ë’¾ì’½ê’¤ò’µá’¤á’¤ë’¥á’¥½’¥Ã’¥É
        // ’°Ê’²¼’¤Î’¤è’¤¦’¤Ë’Äê’µÁ’¤»’¤è’¡£
        /* Example of suffix created from "Hi Ho Hi Ho"
           0: Hi Ho                                    
           1: Ho                                       
           2: Ho Hi Ho                                 
           3:Hi Ho                                     
           4:Hi Ho Hi Ho                              
           5:Ho                                      
           6:Ho Hi Ho                                
           7:i Ho                                    
           8:i Ho Hi Ho                              
           9:o                                       
           A:o Hi Ho                                 
        */
        // It returns the index of the first suffix 
        // which is greater than target_start_end; (and not equal to target_start_end)
	// Suppose target is set "High_and_Low",
        // if start = 0, and end = 2, target_start_end is "Hi".
        // if start = 1, and end = 2, target_start_end is "i".
        // Assuming the suffix array is created from "Hi Ho Hi Ho",                   
        // if target_start_end is "Ho", it will return 7 for "Hi Ho Hi Ho".  
        // Assuming the suffix array is created from "Hi Ho Hi Ho",          
        // if target_start_end is"i", it will return 9 for "Hi Ho Hi Ho".    
        //                                                                   
        //’¡¡’¤³’¤³’¤Ë’¥³’¡¼’¥É’¤ò’µ­’½Ò’¤»’¤è                                           
        //                                                                   
        return suffixArray.length; // ’¤³’¤Î’¹Ô’¤Ï’ÊÑ’¹¹’¤·’¤Ê’¤±’¤ì’¤Ð’¤Ê’¤é’¤Ê’¤¤’¡¢       
    }


    // Suffix Array’¤ò’»È’¤Ã’¤¿’¥×’¥í’¥°’¥é’¥à’¤Î’¥Û’¥ï’¥¤’¥È’¥Æ’¥¹’¥È’¤Ï’¡¢
    // private’¤Ê’¥á’¥½’¥Ã’¥É’¤È’¥Õ’¥£’¡¼’¥ë’¥É’¤ò’¥¢’¥¯’¥»’¥¹’¤¹’¤ë’¤³’¤È’¤¬’É¬’Í×’¤Ê’¤Î’¤Ç’¡¢
    // ’¥¯’¥é’¥¹’¤Ë’Â°’¤¹’¤ëstatic main’¤Ë’½ñ’¤¯’Êý’Ë¡’¤â’¤¢’¤ë’¡£
    // static main’¤¬’¤¢’¤Ã’¤Æ’¤â’¡¢’¸Æ’¤Ó’¤À’¤µ’¤Ê’¤±’¤ì’¤Ð’¤è’¤¤’¡£
    // ’°Ê’²¼’¤Ï’¡¢’¼«’Í³’¤Ë’ÊÑ’¹¹’¤·’¤Æ’¼Â’¸³’¤¹’¤ë’¤³’¤È’¡£
    // ’Ãí’°Õ’¡§’É¸’½à’½Ð’ÎÏ’¡¢’¥¨’¥é’¡¼’½Ð’ÎÏ’¤Ë’¥á’¥Ã’¥»’¡¼’¥¸’¤ò’½Ð’¤¹’¤³’¤È’¤Ï’¡¢
    // static main’¤«’¤é’¤Î’¼Â’¹Ô’¤Î’¤È’¤­’¤À’¤±’¤Ë’µö’¤µ’¤ì’¤ë’¡£
    // ’³°’Éô’¤«’¤éFrequencer’¤ò’»È’¤¦’¤È’¤­’¤Ë’¥á’¥Ã’¥»’¡¼’¥¸’¤ò’½Ð’ÎÏ’¤·’¤Æ’¤Ï’¤Ê’¤é’¤Ê’¤¤’¡£
    // ’¶µ’°÷’¤Î’¥Æ’¥¹’¥È’¼Â’¹Ô’¤Î’¤È’¤­’¤Ë’¥á’¥Ã’¥»’¡¼’¥¸’¤¬’¤Ç’¤ë’¤È’¡¢’»Å’ÍÍ’¤Ë’¤Ê’¤¤’Æ°’ºî’¤ò’¤¹’¤ë’¤È’¤ß’¤Ê’¤·’¡¢
    // ’¸º’ÅÀ’¤Î’ÂÐ’¾Ý’¤Ç’¤¢’¤ë’¡£
    public static void main(String[] args) {
        Frequencer frequencerObject;
        try {
            frequencerObject = new Frequencer();
            frequencerObject.setSpace("Hi Ho Hi Ho".getBytes());
            frequencerObject.printSuffixArray(); // you may use this line for DEBUG
            /* Example from "Hi Ho Hi Ho"    
               0: Hi Ho                      
               1: Ho                         
               2: Ho Hi Ho                   
               3:Hi Ho                       
               4:Hi Ho Hi Ho                 
               5:Ho                          
               6:Ho Hi Ho                    
               7:i Ho                        
               8:i Ho Hi Ho                  
               9:o                           
               A:o Hi Ho                     
            */

            frequencerObject.setTarget("H".getBytes());
            //                                         
            // ****  Please write code to check subByteStartIndex, and subByteEndIndex
            //

            int result = frequencerObject.frequency();
            System.out.print("Freq = "+ result+" ");
            if(4 == result) { System.out.println("OK"); } else {System.out.println("WRONG"); }
        }
        catch(Exception e) {
            System.out.println("STOP");
        }
    }
}

